#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_shuffle_relative : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

// #define input_size 2000000

#define RADIX_BIN 256
#define RADIX_LOG 8
#define RADIX_MASK 255  // Mask of digit bins

#define SEC_RADIX_START 256  // Offset for retrieving values from global buffer
#define THIRD_RADIX_START 512  // Offset for retrieving values from global
                               // buffer
#define FOURTH_RADIX_START \
  768  // Offset for retrieving values from global buffer

#define LANE_COUNT 16  // number of threads in a subgroup
#define LANE_MASK 15
#define LANE_LOG 4

#define LANE gl_LocalInvocationID.x  // the idx of thread in the subgroup
#define SUBGROUP_IDX \
  gl_SubgroupID  // the idx of subgroup the thread belongs to might be wrong
#define SUBGROUP_THREAD_IDX \
  gl_GlobalInvocationID.x  //(LANE + (SUBGROUP_IDX << LANE_LOG)) // the subgroup
                           //relative thread idx

// For the upfront global histogram kernel
#define G_HIST_PART_SIZE 65536
#define G_HIST_VEC_SIZE 16384

layout(set = 0, binding = 0) buffer BSortBuffer { uint b_sort[]; };

layout(set = 0, binding = 1) buffer coherent BGlobalHist {
  uint b_globalHist[1024];
};

layout(push_constant) uniform Constant {
  uint pass_num;
  uint radix_shift;
  uint n;
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

shared uint s_globalHistFirst[RADIX_BIN * 2];
shared uint s_globalHistSec[RADIX_BIN * 2];
shared uint s_globalHistThird[RADIX_BIN * 2];
shared uint s_globalHistFourth[RADIX_BIN * 2];

uint InclusiveWarpScanCircularShift(uint val) {
  for (uint i = 1; i <= (LANE_COUNT >> 1); i <<= 1) {
    const uint t = subgroupShuffleUp(val, i);
    if (gl_SubgroupInvocationID >= i) val += t;
  }
  return subgroupShuffle(val, gl_SubgroupInvocationID + LANE_MASK & LANE_MASK);
}

void k_GlobalHistogram(uint zheyuan_block_id, uint logical_blocks) {
  for (uint i = gl_LocalInvocationID.x; i < RADIX_BIN * 2;
       i += gl_WorkGroupSize.x) {
    s_globalHistFirst[i] = 0;
    s_globalHistSec[i] = 0;
    s_globalHistThird[i] = 0;
    s_globalHistFourth[i] = 0;
  }
  groupMemoryBarrier();
  barrier();

  // warp level histogram
  {
    uint segmentIndex = gl_LocalInvocationID.x / 64 * RADIX_BIN;

    if (zheyuan_block_id < logical_blocks - 1) {
      const uint partEnd = (zheyuan_block_id + 1) * G_HIST_VEC_SIZE;
      for (uint i =
               gl_LocalInvocationID.x + (zheyuan_block_id * G_HIST_VEC_SIZE);
           i < partEnd;
           i += gl_WorkGroupSize.x) {
        const uvec4 t = uvec4(b_sort[i * 4],
                              b_sort[i * 4 + 1],
                              b_sort[i * 4 + 2],
                              b_sort[i * 4 + 3]);

        atomicAdd(s_globalHistFirst[segmentIndex + ((t.x) & 0xFF)], 1);
        atomicAdd(s_globalHistSec[segmentIndex + ((t.x >> 8) & 0xFF)], 1);
        atomicAdd(s_globalHistThird[segmentIndex + ((t.x >> 16) & 0xFF)], 1);
        atomicAdd(s_globalHistFourth[segmentIndex + ((t.x >> 24) & 0xFF)], 1);

        atomicAdd(s_globalHistFirst[segmentIndex + ((t.y) & 0xFF)], 1);
        atomicAdd(s_globalHistSec[segmentIndex + ((t.y >> 8) & 0xFF)], 1);
        atomicAdd(s_globalHistThird[segmentIndex + ((t.y >> 16) & 0xFF)], 1);
        atomicAdd(s_globalHistFourth[segmentIndex + ((t.y >> 24) & 0xFF)], 1);

        atomicAdd(s_globalHistFirst[segmentIndex + ((t.z) & 0xFF)], 1);
        atomicAdd(s_globalHistSec[segmentIndex + ((t.z >> 8) & 0xFF)], 1);
        atomicAdd(s_globalHistThird[segmentIndex + ((t.z >> 16) & 0xFF)], 1);
        atomicAdd(s_globalHistFourth[segmentIndex + ((t.z >> 24) & 0xFF)], 1);

        atomicAdd(s_globalHistFirst[segmentIndex + ((t.w) & 0xFF)], 1);
        atomicAdd(s_globalHistSec[segmentIndex + ((t.w >> 8) & 0xFF)], 1);
        atomicAdd(s_globalHistThird[segmentIndex + ((t.w >> 16) & 0xFF)], 1);
        atomicAdd(s_globalHistFourth[segmentIndex + ((t.w >> 24) & 0xFF)], 1);
      }
    }

    if (zheyuan_block_id == logical_blocks - 1) {
      for (uint i =
               gl_LocalInvocationID.x + (zheyuan_block_id * G_HIST_PART_SIZE);
           i < n;
           i += gl_WorkGroupSize.x) {
        uint t = b_sort[i];
        atomicAdd(s_globalHistFirst[segmentIndex + ((t) & 0xFF)], 1);
        atomicAdd(s_globalHistSec[segmentIndex + ((t >> 8) & 0xFF)], 1);
        atomicAdd(s_globalHistThird[segmentIndex + ((t >> 16) & 0xFF)], 1);
        atomicAdd(s_globalHistFourth[segmentIndex + ((t >> 24) & 0xFF)], 1);
      }
    }
  }

  groupMemoryBarrier();
  barrier();

  // reduce to the first histogram
  for (uint i = gl_LocalInvocationID.x; i < RADIX_BIN;
       i += gl_WorkGroupSize.x) {
    s_globalHistFirst[i] += s_globalHistFirst[i + RADIX_BIN];
    s_globalHistSec[i] += s_globalHistSec[i + RADIX_BIN];
    s_globalHistThird[i] += s_globalHistThird[i + RADIX_BIN];
    s_globalHistFourth[i] += s_globalHistFourth[i + RADIX_BIN];
  }

  // excclusive prefix scan over the counts
  for (uint i = gl_LocalInvocationID.x; i < RADIX_BIN;
       i += gl_WorkGroupSize.x) {
    s_globalHistFirst[i] = InclusiveWarpScanCircularShift(s_globalHistFirst[i]);
    s_globalHistSec[i] = InclusiveWarpScanCircularShift(s_globalHistSec[i]);
    s_globalHistThird[i] = InclusiveWarpScanCircularShift(s_globalHistThird[i]);
    s_globalHistFourth[i] =
        InclusiveWarpScanCircularShift(s_globalHistFourth[i]);
  }
  groupMemoryBarrier();
  barrier();

  if (gl_SubgroupInvocationID < (RADIX_BIN >> LANE_LOG)) {
    s_globalHistFirst[gl_SubgroupInvocationID.x << LANE_LOG] =
        subgroupExclusiveAdd(
            s_globalHistFirst[gl_SubgroupInvocationID.x << LANE_LOG]);
    s_globalHistSec[gl_SubgroupInvocationID.x << LANE_LOG] =
        subgroupExclusiveAdd(
            s_globalHistSec[gl_SubgroupInvocationID.x << LANE_LOG]);
    s_globalHistThird[gl_SubgroupInvocationID.x << LANE_LOG] =
        subgroupExclusiveAdd(
            s_globalHistThird[gl_SubgroupInvocationID.x << LANE_LOG]);
    s_globalHistFourth[gl_SubgroupInvocationID.x << LANE_LOG] =
        subgroupExclusiveAdd(
            s_globalHistFourth[gl_SubgroupInvocationID.x << LANE_LOG]);
  }
  groupMemoryBarrier();
  barrier();

  // Atomically add to device memory
  for (uint i = gl_LocalInvocationID.x; i < RADIX_BIN;
       i += gl_WorkGroupSize.x) {
    atomicAdd(b_globalHist[i],
              s_globalHistFirst[i] +
                  (gl_SubgroupInvocationID > 0
                       ? subgroupBroadcast(s_globalHistFirst[i - 1], 1)
                       : 0));
    atomicAdd(
        b_globalHist[i + SEC_RADIX_START],
        s_globalHistSec[i] + (gl_SubgroupInvocationID > 0
                                  ? subgroupBroadcast(s_globalHistSec[i - 1], 1)
                                  : 0));
    atomicAdd(b_globalHist[i + THIRD_RADIX_START],
              s_globalHistThird[i] +
                  (gl_SubgroupInvocationID > 0
                       ? subgroupBroadcast(s_globalHistThird[i - 1], 1)
                       : 0));
    atomicAdd(b_globalHist[i + FOURTH_RADIX_START],
              s_globalHistFourth[i] +
                  (gl_SubgroupInvocationID > 0
                       ? subgroupBroadcast(s_globalHistFourth[i - 1], 1)
                       : 0));
  }
}

void main() {
  uint logical_blocks = uint(ceil(float(n) / float(G_HIST_PART_SIZE)));
  for (uint zheyuan_block_id = gl_WorkGroupID.x;
       zheyuan_block_id < logical_blocks;
       zheyuan_block_id += gl_NumWorkGroups.x) {
    k_GlobalHistogram(zheyuan_block_id, logical_blocks);
  }
  // k_GlobalHistogram();
}