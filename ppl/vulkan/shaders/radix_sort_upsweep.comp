#version 450
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_vote: enable
#extension GL_KHR_shader_subgroup_shuffle_relative : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

//#define input_size 2000000
#define PART_SIZE 3840

#define RADIX_BIN 256
#define RADIX_LOG 8
#define RADIX_MASK 255 // Mask of digit bins

#define SEC_RADIX_START     256     //Offset for retrieving values from global buffer
#define THIRD_RADIX_START   512     //Offset for retrieving values from global buffer
#define FOURTH_RADIX_START  768     //Offset for retrieving values from global buffer

#define LANE_COUNT 16 // number of threads in a subgroup
#define LANE_MASK 15
#define LANE_LOG 4

#define LANE gl_LocalInvocationID.x // the idx of thread in the subgroup
#define SUBGROUP_IDX  gl_SubgroupID // the idx of subgroup the thread belongs to might be wrong
#define SUBGROUP_THREAD_IDX gl_GlobalInvocationID.x //(LANE + (SUBGROUP_IDX << LANE_LOG)) // the subgroup relative thread idx                                 


//For the upfront global histogram kernel
#define G_HIST_PART_SIZE	65536
#define G_HIST_VEC_SIZE		16384

layout(set = 0, binding = 0)  buffer BSortBuffer {
    uint b_sort[];
};

layout(set = 0, binding = 1)  buffer coherent BGlobalHist {
    uint b_globalHist[1024];
};

layout(set = 0, binding = 4) coherent buffer BPassHist {
    uint b_passHist[];
};

layout(push_constant) uniform Constant{
    uint pass_num;
    uint radix_shift;
    uint n;
    uint e_workgroups;
};




layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

shared uint s_upsweep[RADIX_BIN * 2];


uint InclusiveWarpScanCircularShift(uint val){
    for (uint i = 1; i <= (LANE_COUNT>>1); i <<= 1){
        const uint t = subgroupShuffleUp(val, i);
        if (gl_SubgroupInvocationID >= i)
            val += t;
    }
    return subgroupShuffle(val, gl_SubgroupInvocationID + LANE_MASK & LANE_MASK);
}


void global_hist_exclusive_scan(uint threadidx){
    groupMemoryBarrier();
    barrier();

    if (threadidx < (RADIX_BIN / LANE_COUNT)){
        s_upsweep[(threadidx + 1) * LANE_COUNT - 1] += subgroupExclusiveAdd(s_upsweep[threadidx + 1] * LANE_COUNT - 1);
    }
    groupMemoryBarrier();
    barrier();

    // add to global histogram atomatically
    const uint offset = radix_shift << 5;
    const uint circular_shift = gl_SubgroupInvocationID + 1 & LANE_MASK;
    for (uint i = threadidx; i < RADIX_BIN; i+= gl_WorkGroupSize.x){
        const uint index = circular_shift + (i & ~ LANE_MASK);
        atomicAdd(b_globalHist[offset + index], (gl_SubgroupInvocationID != LANE_MASK ? s_upsweep[i] : 0) + (i >= LANE_COUNT ? subgroupBroadcast(s_upsweep[i - 1], 0) : 0));
    }
}



void k_upsweep(uint block_id){
    for (uint i = gl_LocalInvocationID.x; i < RADIX_BIN * 2; i += gl_WorkGroupSize.x){
        s_upsweep[i] = 0;
    }
    groupMemoryBarrier();
    barrier();

    // warp level histogram
    {
        const uint segmentIndex = gl_LocalInvocationID.x / 64 * RADIX_BIN;
        const uint partition_end = (block_id == e_workgroups -1) ? n : (block_id + 1) * PART_SIZE;
        uint t;
            for (uint i = gl_LocalInvocationID.x + block_id * PART_SIZE; i < partition_end; i += gl_WorkGroupSize.x){
                atomicAdd(s_upsweep[segmentIndex + b_sort[i]], 1);
            }

    }

    groupMemoryBarrier();
    barrier();

    // reduce counts and add to device memory
    for (uint i = gl_LocalInvocationID.x; i < RADIX_BIN; i += gl_WorkGroupSize.x){
        s_upsweep[i] += s_upsweep[i + RADIX_BIN];
        b_passHist[i * e_workgroups + block_id] = s_upsweep[i];
        s_upsweep[i] += subgroupExclusiveAdd(s_upsweep[i]);
    }

    global_hist_exclusive_scan(gl_LocalInvocationID.x);
}
void main() {
    k_upsweep(gl_WorkGroupID.x);
}