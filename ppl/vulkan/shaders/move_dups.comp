#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable

layout(set = 2, binding = 0) buffer OutIdx { uint out_idx[]; };

layout(set = 2, binding = 1) buffer InKeys { uint in_keys[]; };

layout(set = 2, binding = 2) buffer OutKeys { uint out_keys[]; };

layout(push_constant) uniform N { uint n; };

layout(local_size_x = 256) in;

void moveDups(uint block_id) {
  /*
  uint num_tiles = uint(ceil(float(n) / float(gl_WorkGroupSize.x)));
  for (uint tile_idx = gl_WorkGroupID.x; tile_idx < num_tiles; tile_idx +=
  gl_NumWorkGroups.x){ uint idx = tile_idx * gl_WorkGroupSize.x +
  gl_LocalInvocationID.x; if (idx < n){ out_keys[out_idx[idx]] = in_keys[idx];
      }
  }
  */
  uint idx = block_id * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
  if (idx < n) {
    out_keys[out_idx[idx]] = in_keys[idx];
  }
}
void main() {
  uint logical_blocks = uint(ceil(float(n) / float(gl_WorkGroupSize.x)));
  for (uint zheyuan_block_id = gl_WorkGroupID.x;
       zheyuan_block_id < logical_blocks;
       zheyuan_block_id += gl_NumWorkGroups.x) {
    moveDups(zheyuan_block_id);
  }
}