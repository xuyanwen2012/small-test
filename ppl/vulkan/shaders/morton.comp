#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable

// #define input_size 2000000

layout(set = 0, binding = 0) buffer Data { vec4 data[]; };

layout(set = 0, binding = 1) buffer MortonKeys { uint morton_keys[]; };

layout(push_constant) uniform Constants {
  uint n;
  float min_coord;
  float range;
};

layout(local_size_x = 768) in;

uint morton3D_SplitBy3bits(const float a) {
  uint b = uint(a);
  uint x = b & 0x000003ff;
  x = (x | x << 16) & 0x030000ff;
  x = (x | x << 8) & 0x0300f00f;
  x = (x | x << 4) & 0x30c30c3;
  x = (x | x << 2) & 0x9249249;
  return x;
}

uint m3D_e_magicbits(const float x, const float y, const float z) {
  return morton3D_SplitBy3bits(x) | (morton3D_SplitBy3bits(y) << 1) |
         (morton3D_SplitBy3bits(z) << 2);
}

uint single_point_to_code_v2(
    float x, float y, float z, const float min_coord, const float range) {
  float bit_scale = 1024.0;
  x = (x - min_coord) / range;
  y = (y - min_coord) / range;
  z = (z - min_coord) / range;
  return m3D_e_magicbits(x * bit_scale, y * bit_scale, z * bit_scale);
}

void k_ComputeMortonCode() {
  const uint idx =
      gl_LocalInvocationID.x + gl_WorkGroupSize.x * gl_WorkGroupID.x;
  const uint stride = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
  for (uint i = idx; i < n; i += stride) {
    morton_keys[i] = single_point_to_code_v2(
        data[i].x, data[i].y, data[i].z, min_coord, range);
  }
}

void main() { k_ComputeMortonCode(); }