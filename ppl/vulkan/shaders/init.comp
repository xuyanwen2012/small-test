#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable

#define input_size 2000000

#define TAUS_STEP_1 (((z1 & 4294967294U) << 12) ^ (((z1 << 13) ^ z1) >> 19))
#define TAUS_STEP_2 (((z2 & 4294967288U) << 4) ^ (((z2 << 2) ^ z2) >> 25))
#define TAUS_STEP_3 (((z3 & 4294967280U) << 17) ^ (((z3 << 3) ^ z3) >> 11))
#define LCG_STEP (z4 * 1664525 + 1013904223U)
#define HYBRID_TAUS (z1 ^ z2 ^ z3 ^ z4)

layout(set = 0, binding = 0) buffer RandomBuffer { vec4 random_buffer[]; };

layout(push_constant) uniform PushConstant {
  int size;
  int min_val;
  int range;
  int seed;
};

layout(local_size_x = 512) in;

float uint_to_float(uint x) { return (float(x & 0xFFFFFF) / 16777216.0); }

float uint_to_float_scaled(uint x, float min_val, float range) {
  return min_val + uint_to_float(x) * range;
}
void Init() {
  const uint idx =
      gl_LocalInvocationID.x + gl_WorkGroupSize.x * gl_WorkGroupID.x;

  uint z1 = (idx << 2) * seed;
  uint z2 = ((idx << 2) + 1) * seed;
  uint z3 = ((idx << 2) + 2) * seed;
  uint z4 = ((idx << 2) + 3) * seed;

  for (uint i = idx; i < size; i += gl_WorkGroupSize.x * gl_NumWorkGroups.x) {
    z1 = TAUS_STEP_1;
    z2 = TAUS_STEP_2;
    z3 = TAUS_STEP_3;
    z4 = LCG_STEP;
    random_buffer[i] = vec4(uint_to_float_scaled(z1 ^ z2, min_val, range),
                            uint_to_float_scaled(z2 ^ z3, min_val, range),
                            uint_to_float_scaled(z3 ^ z4, min_val, range),
                            uint_to_float_scaled(z1 ^ z4, min_val, range));
  }
}

void main() { Init(); }
