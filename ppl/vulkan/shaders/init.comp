// ----------------------------------------------------------------------------
// Purpose:
//     Initializes a buffer of 4D points with random values using a hybrid
//     Tausworthe random number generator.
//
// Input:
//     - Buffer: None
//     - Push Constants:
//         * size: Number of points to generate
//         * min_coord: Minimum coordinate value
//         * range: Range of coordinates (max = min_coord + range)
//         * seed: Random number generator seed
//
// Output:
//     - Buffer: Array of vec4 points, each component in range [min_coord,
//     min_coord + range]
//
// Workgroup Size: 512 threads
// Expected Dispatch: ceil(size / 512) workgroups
//
// Note:
//     Uses a combination of Tausworthe and LCG generators for high-quality
//     random numbers suitable for particle system initialization and Monte
//     Carlo simulations.
// ----------------------------------------------------------------------------

#version 450

#define TAUS_STEP_1 (((z1 & 4294967294U) << 12) ^ (((z1 << 13) ^ z1) >> 19))
#define TAUS_STEP_2 (((z2 & 4294967288U) << 4) ^ (((z2 << 2) ^ z2) >> 25))
#define TAUS_STEP_3 (((z3 & 4294967280U) << 17) ^ (((z3 << 3) ^ z3) >> 11))
#define LCG_STEP (z4 * 1664525U + 1013904223U)

layout(set = 0, binding = 0) buffer RandomBuffer { vec4 random_buffer[]; };

layout(push_constant) uniform PushConstants {
  int size;
  float min_coord;
  float range;
  int seed;
}
push_constant;

layout(local_size_x = 512) in;

float uint_to_float(uint x) { return float(x) / float(0xffffffffU); }

float uint_to_float_scaled(uint x, float min_val, float range) {
  return min_val + uint_to_float(x) * range;
}

void Init() {
  uint idx = gl_LocalInvocationID.x + gl_WorkGroupSize.x * gl_WorkGroupID.x;
  uint stride = gl_WorkGroupSize.x * gl_NumWorkGroups.x;

  uint z1 = idx ^ (push_constant.seed * 1234567U);
  uint z2 = idx ^ (push_constant.seed * 7654321U);
  uint z3 = idx ^ (push_constant.seed * 2345678U);
  uint z4 = idx ^ (push_constant.seed * 8765432U);

  for (uint i = idx; i < push_constant.size; i += stride) {
    z1 = TAUS_STEP_1;
    z2 = TAUS_STEP_2;
    z3 = TAUS_STEP_3;
    z4 = LCG_STEP;
    random_buffer[i] =
        vec4(uint_to_float_scaled(
                 z1 ^ z2, push_constant.min_coord, push_constant.range),
             uint_to_float_scaled(
                 z2 ^ z3, push_constant.min_coord, push_constant.range),
             uint_to_float_scaled(
                 z3 ^ z4, push_constant.min_coord, push_constant.range),
             uint_to_float_scaled(
                 z1 ^ z4, push_constant.min_coord, push_constant.range));
  }
}

void main() { Init(); }
