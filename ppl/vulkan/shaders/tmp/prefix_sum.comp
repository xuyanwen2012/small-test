#version 450
#extension GL_KHR_shader_subgroup_basic:enable
#extension GL_KHR_shader_subgroup_ballot:enable
#extension GL_KHR_shader_subgroup_arithmetic:enable
#extension GL_KHR_shader_subgroup_vote:enable
#extension GL_KHR_shader_subgroup_shuffle_relative:enable
#extension GL_KHR_shader_subgroup_shuffle:enable
#extension  GL_EXT_shader_explicit_arithmetic_types_int64 : enable
#extension GL_EXT_shader_subgroup_extended_types_int64 : enable
//#extension GL_EXT_debug_printf:enable

#define PARTITION_SIZE 3072
#define PART_VEC_SIZE	768
#define LANE_COUNT 16
#define LANE_MASK 15

#define WORKGROUP_NUM 256
#define SUBGROUP_PARTITIONS 3
#define SUBROUP_PART_SIZE 48
#define SUBGROUP_PART_START (gl_SubgroupID * SUBROUP_PART_SIZE)
#define PART_START (partitionIndex * PART_VEC_SIZE)


#define FLAG_NOT_READY  0           //Flag indicating this partition tile's local reduction is not ready
#define FLAG_REDUCTION  1           //Flag indicating this partition tile's local reduction is ready
#define FLAG_INCLUSIVE  2           //Flag indicating this partition tile has summed all preceding tiles and added to its sum.
#define FLAG_MASK       3 

layout(set=0,binding=0) buffer Data{
    uint scan[];
};

layout(set=0,binding=1)  buffer Reduction{
    volatile uint workgroup_reduction[];
};

layout(set = 0, binding=2) coherent buffer Index{
    volatile uint index[];
};

layout(push_constant)uniform Constants{
    uint aligned_size;
};

layout(local_size_x=256)in;

shared uvec4 s_lookback[PART_VEC_SIZE];
shared uint s_reduction[WORKGROUP_NUM / LANE_COUNT];
shared uint s_broadcast;

uint InclusiveWarpScanCircularShift(uint val){
    for (uint i = 1; i <= (LANE_COUNT >> 1); i <<= 1){
        const uint t = subgroupShuffleUp(val, i);
        if (gl_SubgroupInvocationID >= i)
            val += t;
    }
    return subgroupShuffle(val, (gl_SubgroupInvocationID + LANE_MASK) & LANE_MASK);
}

uint ActiveInclusiveWarpScan(uint val) {
    uint result = 0;
    for (uint i = 1; i <= (LANE_COUNT >> 1); i <<= 1){
        uint t = subgroupShuffleUp(val, i);
        if (gl_SubgroupInvocationID >= i)
            val += t;
    }
    return val;
}



uint subgroupReduceSum(uint val){
    for (int mask = LANE_COUNT >> 1; mask > 0; mask >> 1){
        val += subgroupShuffleXor(val, mask);
    }
    return val;
}

uvec4 setXAddYZW(uint val_to_add, uvec4 val){
    return uvec4(val_to_add, val_to_add + val.y, val_to_add + val.z, val_to_add + val.w);
}

uvec4 AddToUvec4(uint val_to_add, uvec4 val){
    return uvec4(val.x + val_to_add, val.y + val_to_add, val.z + val_to_add, val.w + val_to_add);
}

void prefix_sum(){
    // get partition index
    if (gl_LocalInvocationID.x == 0){
        s_broadcast = atomicAdd(index[0], 1);
    }
    groupMemoryBarrier();
    barrier();

    const uint partitionIndex = s_broadcast;

    // local eclusive scan
    if (partitionIndex < gl_NumWorkGroups.x - 1){
        uint subgroup_reduction = 0;
        for(uint i = gl_SubgroupInvocationID.x + SUBGROUP_PART_START, k = 0; k < SUBGROUP_PARTITIONS; i += LANE_COUNT, ++k){
            uvec4 t = uvec4(scan[i*4 + PART_START*4], scan[i*4 + PART_START*4 + 1], scan[i*4 + PART_START*4 + 2], scan[i*4 + PART_START*4 + 3]);
            
            // intra-element reductions
            uint t2 = t.x;
            t.x += t.y;
            t.y = t2;

            t2 = t.x;
            t.x += t.z;
            t.z = t2;

            t2 = t.x;
            t.x += t.w;
            t.w = t2;
            
            // subgroup inclusive scan and circular shift the result to the right by one lane 
            t2 = InclusiveWarpScanCircularShift(t.x);
            // store the result in shared memory for lookback
            s_lookback[i] = setXAddYZW((gl_SubgroupInvocationID.x > 0 ? t2 : 0) + (k > 0 ? subgroup_reduction : 0), t);
            subgroup_reduction += subgroupBroadcast(t2, 0);
        }
        // store the subgroup reduction in shared memory for workgroup reduction
        if (gl_SubgroupInvocationID.x == 0){
            s_reduction[gl_SubgroupID] = subgroup_reduction;
        
        }
    }

    if (partitionIndex == gl_NumWorkGroups.x - 1){
        uint subgroup_reduction = 0;
        const uint final_part_size = aligned_size - PART_START;
        // warp level scan pattern to avoid bank conflict
        for(uint i = gl_SubgroupInvocationID.x + SUBGROUP_PART_START, k = 0; k < SUBGROUP_PARTITIONS; i += LANE_COUNT, ++k){
            uvec4 t = i < final_part_size ? uvec4(scan[i*4 + PART_START*4], scan[i*4 + PART_START*4 + 1], scan[i*4 + PART_START*4 + 2], scan[i*4 + PART_START*4 + 3]) : uvec4(0, 0, 0, 0);

            // do prefix sum on the vector(4) of elements
            uint t2 = t.x;
            t.x += t.y;
            t.y = t2;

            t2 = t.x;
            t.x += t.z;
            t.z = t2;

            t2 = t.x;
            t.x += t.w;
            t.w = t2; 

            // do warp level prefix sum on 4*64 elements
            t2 = InclusiveWarpScanCircularShift(t.x);
           
            s_lookback[i] = setXAddYZW((gl_SubgroupInvocationID.x > 0 ? t2 : 0) + (k > 0 ? subgroup_reduction : 0), t);
            subgroup_reduction += subgroupBroadcast(t2, 0);
        }
        if (gl_SubgroupInvocationID.x == 0){
            s_reduction[gl_SubgroupID] = subgroup_reduction;
        }
    }
    groupMemoryBarrier();
    barrier();

    // local reduce and device broadcast
    if (gl_LocalInvocationID.x < WORKGROUP_NUM / LANE_COUNT){
        s_reduction[gl_LocalInvocationID.x] = subgroupInclusiveAdd(s_reduction[gl_LocalInvocationID.x]);
    }
    if (gl_LocalInvocationID.x == WORKGROUP_NUM / LANE_COUNT -1){
        atomicAdd(workgroup_reduction[partitionIndex], (partitionIndex > 0 ? FLAG_REDUCTION : FLAG_INCLUSIVE) | (s_reduction[gl_LocalInvocationID.x] << 2));
    }
    groupMemoryBarrier();
    barrier();
    // look back
    uint prev_reduction = 0;
    //s_broadcast = 0;
    if (partitionIndex > 0 && gl_LocalInvocationID.x < LANE_COUNT){
        for(int k = int(partitionIndex); k > 0; ){
            const uint flagPayload = workgroup_reduction[k - 1];// ((k > LANE_COUNT) ? workgroup_reduction[k - 1] : FLAG_INCLUSIVE);

            if ((flagPayload & FLAG_MASK) == FLAG_INCLUSIVE){
                prev_reduction += flagPayload >> 2;
                if(gl_SubgroupInvocationID.x == 0){
                    s_broadcast = prev_reduction;
                    atomicAdd(workgroup_reduction[partitionIndex], FLAG_REDUCTION | (prev_reduction << 2));
                }
                break;
            }

            if ((flagPayload & FLAG_MASK) == FLAG_REDUCTION){
                prev_reduction += flagPayload >> 2;
                k--;

            }

        }
    }
    
    
        groupMemoryBarrier();
        barrier();

    
    if (gl_LocalInvocationID.x >= LANE_COUNT){
        prev_reduction += s_broadcast + s_reduction[gl_SubgroupID.x - 1];
    }
    //const uint test_prev_reduction = s_broadcast + (gl_LocalInvocationID.x >= LANE_COUNT ? s_reduction[gl_SubgroupID.x - 1] : 0);

    if (partitionIndex < gl_NumWorkGroups.x - 1){
        for (uint i = gl_SubgroupInvocationID.x + SUBGROUP_PART_START, k = 0; k < SUBGROUP_PARTITIONS; i += LANE_COUNT, ++k){
            uvec4 add  = AddToUvec4(prev_reduction, s_lookback[i]);
            scan[i*4 + PART_START*4] = add.x;
            scan[i*4 + PART_START*4 + 1] = add.y;
            scan[i*4 + PART_START*4 + 2] = add.z;
            scan[i*4 + PART_START*4 + 3] = add.w;
        }
    }

    if (partitionIndex == gl_NumWorkGroups.x - 1){
        const uint final_part_size = aligned_size - PART_START;
        for (uint i = gl_SubgroupInvocationID.x + SUBGROUP_PART_START, k = 0; k < SUBGROUP_PARTITIONS && i < final_part_size; i += LANE_COUNT, ++k){
            uvec4 add  = AddToUvec4(prev_reduction, s_lookback[i]);
            scan[i*4 + PART_START*4] = add.x;
            scan[i*4 + PART_START*4 + 1] = add.y;
            scan[i*4 + PART_START*4 + 2] = add.z;
            scan[i*4 + PART_START*4 + 3] = add.w;
        }
    }
}

void main(){

    prefix_sum();
}
