#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable

#define morton_bits 30

struct OctNode {
  int children[8];
  vec4 corner;
  float cell_size;
  int child_node_mask;
  int child_leaf_mask;
};

void SetChild(inout OctNode node, int which_child, int oct_idx) {
  node.children[which_child] = oct_idx;
  node.child_node_mask |= 1 << which_child;
}

void SetLeaf(inout OctNode node, int which_child, int leaf_idx) {
  node.children[which_child] = leaf_idx;
  node.child_leaf_mask &= ~(1 << which_child);
}

bool IsLeaf(const int internal_value) {
  // check the most significant bit, which is used as "is leaf node?"
  return (internal_value >> (/*sizeof(int)*/ 4 * 8 - 1)) != 0;
}

int GetLeafIndex(const int internal_value) {
  // delete the last bit which tells if this is leaf or internal index
  return internal_value & ~(1 << (/*sizeof(int)*/ 4 * 8 - 1));
}

layout(set = 0, binding = 0) buffer OctreeNodes { OctNode oct_nodes[]; };

layout(set = 0, binding = 1) buffer NodeOffsets { uint node_offsets[]; };

layout(set = 0, binding = 2) buffer RtNodeCounts { int rt_node_counts[]; };

layout(set = 0, binding = 3) buffer Codes { uint codes[]; };

layout(set = 0, binding = 4) buffer PrefixN { uint8_t rt_prefixN[]; };

layout(set = 0, binding = 5) buffer Parents { int rt_parents[]; };

layout(set = 0, binding = 6) buffer RtLeftChild { int rt_leftChild[]; };

layout(set = 0, binding = 7) buffer RtHasLeafLeft { bool rt_hasLeafLeft[]; };

layout(set = 0, binding = 8) buffer RtHasLeafRight { bool rt_hasLeafRight[]; };

layout(push_constant) uniform Constants {
  float min_coord;
  float range;
  int n_brt_nodes;
};

layout(local_size_x = 512) in;

float morton3D_GetThirdBits(const int m) {
  int x = m & 0x9249249;
  x = (x ^ (x >> 2)) & 0x30c30c3;
  x = (x ^ (x >> 4)) & 0x0300f00f;
  x = (x ^ (x >> 8)) & 0x30000ff;
  x = (x ^ (x >> 16)) & 0x000003ff;
  return x;
}

void m3D_d_magicbits(const int m, inout vec3 xyz) {
  xyz[0] = morton3D_GetThirdBits(m);
  xyz[1] = morton3D_GetThirdBits(m >> 1);
  xyz[2] = morton3D_GetThirdBits(m >> 2);
}

void morton32_to_xyz(inout vec4 ret,
                     const int code,
                     const float min_coord,
                     const float range) {
  const float bit_scale = 1024.f;

  vec3 dec_raw_x;
  m3D_d_magicbits(code, dec_raw_x);

  const float dec_x = (dec_raw_x[0] / bit_scale) * range + min_coord;
  const float dec_y = (dec_raw_x[1] / bit_scale) * range + min_coord;
  const float dec_z = (dec_raw_x[2] / bit_scale) * range + min_coord;

  // vec4 result = {dec_x, dec_y, dec_z, 1.0f};
  // glm_vec4_copy(result, *ret);
  ret[0] = dec_x;
  ret[1] = dec_y;
  ret[2] = dec_z;
  ret[3] = 1.f;
}

void k_MakeOctNodes(uint i) {
  const int root_level = rt_prefixN[i] / 3;

  if (i < n_brt_nodes) {
    int oct_idx = int(node_offsets[i]);
    const int n_new_nodes = int(rt_node_counts[i]);
    // for each nodes, make n_new_nodes
    for (int j = 0; j < n_new_nodes - 1; ++j) {
      const int level = rt_prefixN[i] / 3 - j;
      const int node_prefix = int(codes[i] >> (morton_bits - (3 * level)));
      const int which_child = node_prefix & 0x7;
      const int parent = oct_idx + 1;

      // oct_nodes[parent].children[which_child] = oct_idx;

      SetChild(oct_nodes[parent], which_child, oct_idx);

      morton32_to_xyz(oct_nodes[oct_idx].corner,
                      node_prefix << (morton_bits - (3 * level)),
                      min_coord,
                      range);

      // each cell is half the size of the level above it
      oct_nodes[oct_idx].cell_size = range / float(1 << (level - root_level));
      oct_idx = parent;
    }

    if (n_new_nodes > 0) {
      int rt_parent = rt_parents[i];

      int counter = 0;
      while (rt_node_counts[rt_parent] == 0) {
        rt_parent = rt_parents[rt_parent];

        ++counter;
        if (counter > 30) {  // 64 / 3
          // tb_trace_w("counter > 22");
          break;
        }
      }

      const int oct_parent = int(node_offsets[rt_parent]);
      const int top_level = rt_prefixN[i] / 3 - n_new_nodes + 1;
      const int top_node_prefix =
          int(codes[i] >> (morton_bits - (3 * top_level)));

      const int which_child = top_node_prefix & 0x7;

      // oct_nodes[oct_parent].children[which_child] = oct_idx;
      // oct_nodes[oct_parent].SetChild(oct_idx, which_child);
      SetChild(oct_nodes[oct_parent], which_child, oct_idx);

      morton32_to_xyz(oct_nodes[oct_idx].corner,
                      top_node_prefix << (morton_bits - (3 * top_level)),
                      min_coord,
                      range);
      oct_nodes[oct_idx].cell_size =
          range / float(1 << (top_level - root_level));
    }
  }
}

/*
void k_LinkLeafNodes(int i ){

    if(i<n_brt_nodes){
        if(rt_hasLeafLeft[i] == 1){
            int leaf_idx=rt_leftChild[i];
            int leaf_level=rt_prefixN[i]/3+1;
            int leaf_prefix=int(codes[leaf_idx]>>(morton_bits-(3*leaf_level)));
            int which_child=leaf_prefix&0x7;
            // walk up the radix tree until finding a node which contributes an
            // octnode
            int rt_node=i;
            while(rt_node_counts[rt_node]==0){
                rt_node=rt_parents[rt_node];
            }
            // the lowest octnode in the string contributed by rt_node will be
the
            // lowest index
            int bottom_oct_idx= int(node_offsets[rt_node]);
            SetLeaf(oct_nodes[bottom_oct_idx],which_child,leaf_idx);
        }
        if(rt_hasLeafRight[i] == 1){
            int leaf_idx=rt_leftChild[i]+1;
            int leaf_level=rt_prefixN[i]/3+1;
            int leaf_prefix=int(codes[leaf_idx]>>(morton_bits-(3*leaf_level)));
            int which_child=leaf_prefix&0x7;
            int rt_node=i;
            while(rt_node_counts[rt_node]==0){
                rt_node=rt_parents[rt_node];
            }
            // the lowest octnode in the string contributed by rt_node will be
the
            // lowest index
            int bottom_oct_idx= int(node_offsets[rt_node]);
            SetLeaf(oct_nodes[bottom_oct_idx],which_child,leaf_idx);
        }
    }
}
*/

void main() {
  const uint idx =
      gl_LocalInvocationID.x + gl_WorkGroupSize.x * gl_WorkGroupID.x;
  const uint stride = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
  for (uint i = idx; i < n_brt_nodes; i += stride) {
    k_MakeOctNodes(i);
  }
}
