#version 450
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_vote: enable
#extension GL_KHR_shader_subgroup_shuffle_relative : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

//#define input_size 2000000

#define RADIX_BIN 256
#define RADIX_LOG 8
#define RADIX_MASK 255 // Mask of digit bins

#define SEC_RADIX_START     256     //Offset for retrieving values from global buffer
#define THIRD_RADIX_START   512     //Offset for retrieving values from global buffer
#define FOURTH_RADIX_START  768     //Offset for retrieving values from global buffer

#define LANE_COUNT 16 // number of threads in a subgroup
#define LANE_MASK 15
#define LANE_LOG 4

#define LANE gl_LocalInvocationID.x // the idx of thread in the subgroup
#define SUBGROUP_IDX  gl_SubgroupID // the idx of subgroup the thread belongs to might be wrong
#define SUBGROUP_THREAD_IDX gl_GlobalInvocationID.x //(LANE + (SUBGROUP_IDX << LANE_LOG)) // the subgroup relative thread idx

#define FLAG_NOT_READY      0       //Flag value inidicating neither inclusive sum, or aggregate sum of a partition tile is ready
#define FLAG_AGGREGATE      1       //Flag value indicating aggregate sum of a partition tile is ready
#define FLAG_INCLUSIVE      2       //Flag value indicating inclusive sum of a partition tile is ready
#define FLAG_MASK           3       //Mask used to retrieve flag values

layout(local_size_x = 256) in;
layout(set = 2, binding = 1) buffer BGlobalHist{
    uint b_globalHist[1024];
};

layout(set = 2, binding = 4) buffer BPassHist {
    uint b_passHist[];
};

layout(push_constant) uniform Constant{
    uint pass_num;
    uint radix_shift;
    uint n;
    uint e_workgroups;
};



shared uint s_scan[RADIX_BIN];

void global_hist_exclusive_scan(uint threadidx, uint workgroupidx){
    groupMemoryBarrier();
    barrier();
    if(threadidx < (RADIX_BIN/ LANE_COUNT)){
        s_scan[(threadidx + 1) * LANE_COUNT - 1] += subgroupExclusiveAdd(s_scan[(threadidx + 1) * LANE_COUNT - 1]);
    }
    groupMemoryBarrier();
    barrier();

    const uint laneMask = LANE_MASK;
    const uint index = (gl_SubgroupInvocationID + 1 & laneMask) + (threadidx & ~laneMask);
    b_passHist[index + workgroupidx * RADIX_BIN * e_workgroups] = ((gl_SubgroupInvocationID != laneMask ? s_scan[threadidx] : 0) +
        (threadidx >= LANE_COUNT ? subgroupBroadcast(s_scan[threadidx - 1], 0) : 0)) << 2 | FLAG_INCLUSIVE;
    // b_passHist[index + workgroupidx * RADIX_BIN * e_workgroups] = 20;
}
void k_scan(uint block_id, uint logical_blocks){
    const uint t = b_globalHist[gl_LocalInvocationID.x + block_id * RADIX_BIN];
    s_scan[gl_LocalInvocationID.x] = t + subgroupExclusiveAdd(t);

    if (LANE_COUNT >= 16){
        global_hist_exclusive_scan(gl_LocalInvocationID.x, block_id);
    }
    
    if (LANE_COUNT < 16){

    }
}

void main(){
    uint logical_blocks = 256;
    for (uint zheyuan_block_id = gl_WorkGroupID.x; zheyuan_block_id < logical_blocks; zheyuan_block_id += gl_NumWorkGroups.x){
        k_scan(zheyuan_block_id, logical_blocks);
    }
}